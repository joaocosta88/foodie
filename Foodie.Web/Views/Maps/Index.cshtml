@using Foodie.Services.Dtos
@model List<Place>

<script>
	(g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
		key: "@ViewData["GMapsKey"]",
		v: "weekly",
		// Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
		// Add other bootstrap parameters as needed, using camel case.
	});

	let map;

	async function initMap() {
		const { Map } = await google.maps.importLibrary("maps");

		map = new Map(document.getElementById("map"), {
			center: { lat: -34.397, lng: 150.644 },
			zoom: 8,
		});

		var bounds = new google.maps.LatLngBounds();

	@for (int i = 0; i < Model.Count(); i++)
	{
		var place = Model.ElementAt(i);
		@:var item@(i) = new google.maps.LatLng(@(place.Lat), @(place.Long))
		@:bounds.extend(item@(i));
		@:var marker = new google.maps.Marker({
		@:position: item@(i),
		@:map: map
		@:});
	}

		map.fitBounds(bounds)
					}

	initMap();
</script>

<div id="map-container" style="display:flex; flex-direction: row;">
	<div id=results-list>
		@foreach (var place in Model)
		{
			@await Html.PartialAsync("ListEntry", place)
		}
	</div>
	<div id="map"></div>
</div>